// Generated by vhl...
use vhl_stdlib::serdes::{buf::{Buf, BufMut, Error as BufError}, DeserializeVlu4, nibble_buf, NibbleBuf, NibbleBufMut, SerDesSize, SerializeVlu4, traits::{DeserializeBytes, SerializeBytes}};

// Generated from Parser:file:/Users/roman/git/vhl_hackathon/01_led_lighting/ecbridge_fw/vhl/main.vhl:0:39
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub struct Point {
    pub x: u16,
    pub y: u16,
}

// Generated from Parser:file:/Users/roman/git/vhl_hackathon/01_led_lighting/ecbridge_fw/vhl/main.vhl:0:39
impl SerializeBytes for Point {
    type Error = BufError;
    fn ser_bytes(&self, wr: &mut BufMut) -> Result<(), Self::Error> {
        wr.put_u16_le(self.x)?;
        wr.put_u16_le(self.y)?;
        Ok(())
    }
    fn len_bytes(&self) -> SerDesSize {
        SerDesSize::Sized(4)
    }
}

// Generated from Parser:file:/Users/roman/git/vhl_hackathon/01_led_lighting/ecbridge_fw/vhl/main.vhl:0:39
impl<'i> DeserializeBytes<'i> for Point {
    type Error = BufError;
    fn des_bytes<'di>(rdr: &'di mut Buf<'i>) -> Result<Self, Self::Error> {
        Ok(Point {
            x: rdr.get_u16_le()?,
            y: rdr.get_u16_le()?,
        })
    }
}

impl SerializeVlu4 for Point {
    type Error = nibble_buf::Error;
    fn ser_vlu4(&self, nwr: &mut NibbleBufMut) -> Result<(), Self::Error> {
        nwr.put_u16_be(self.x)?;
        nwr.put_u16_be(self.y)?;
        Ok(())
    }
    fn len_nibbles(&self) -> SerDesSize {
        SerDesSize::Sized(8)
    }
}

impl<'i> DeserializeVlu4<'i> for Point {
    type Error = nibble_buf::Error;
    fn des_vlu4<'di>(nrd: &'di mut NibbleBuf<'i>) -> Result<Self, Self::Error> {
        Ok(Point {
            x: nrd.get_u16_be()?,
            y: nrd.get_u16_be()?
        })
    }
}